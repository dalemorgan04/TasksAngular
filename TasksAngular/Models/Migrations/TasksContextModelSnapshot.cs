// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TasksAngular.Models.Entities;

namespace TasksAngular.Migrations
{
    [DbContext(typeof(TasksContext))]
    partial class TasksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TasksAngular.Models.Entities.CalendarEvent", b =>
                {
                    b.Property<int>("CalendarEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<bool>("HasTime");

                    b.Property<int?>("PriorityId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.HasKey("CalendarEventId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.CalendarEventRecurrence", b =>
                {
                    b.Property<int>("CalendarEventRecurrenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalendarEventId");

                    b.Property<int?>("DayOfMonth");

                    b.Property<int?>("DayOfWeek");

                    b.Property<int>("IntervalType");

                    b.Property<int?>("MonthNo");

                    b.Property<int>("RepeatEveryCount");

                    b.Property<DateTime>("StartOnDate")
                        .HasColumnType("date");

                    b.Property<int?>("WeekOfYear");

                    b.Property<int?>("WeekdayOfMonth");

                    b.HasKey("CalendarEventRecurrenceId");

                    b.ToTable("CalendarEventRecurrences");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Habit", b =>
                {
                    b.Property<int>("HabitId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Count")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("EndOnCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("EndOnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EndOnType")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsComplete");

                    b.Property<int?>("PriorityId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TimeFrameId");

                    b.Property<int>("UserId");

                    b.HasKey("HabitId");

                    b.HasIndex("EndOnType");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.HabitEndOnType", b =>
                {
                    b.Property<int>("HabitEndOnTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("HabitEndOnTypeId");

                    b.ToTable("HabitEndOnType");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.HabitException", b =>
                {
                    b.Property<int>("HabitExceptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("HabitId");

                    b.Property<int>("HabitReccurrenceId");

                    b.Property<bool>("IsHidden");

                    b.HasKey("HabitExceptionId");

                    b.ToTable("HabitExceptions");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.HabitRecurrence", b =>
                {
                    b.Property<int>("HabitRecurrenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DayOfMonth");

                    b.Property<int?>("DayOfWeek");

                    b.Property<int>("HabitId");

                    b.Property<int>("IntervalType");

                    b.Property<int?>("MonthNo");

                    b.Property<int>("RepeatEveryCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("StartOnDate")
                        .HasColumnType("date");

                    b.Property<int?>("WeekOfYear");

                    b.Property<int?>("WeekdayOfMonth");

                    b.HasKey("HabitRecurrenceId");

                    b.ToTable("HabitRecurrences");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Priority", b =>
                {
                    b.Property<int>("PriorityId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<bool>("IsComplete");

                    b.Property<int?>("PriorityId");

                    b.Property<int?>("TimeFrameId");

                    b.Property<int>("UserId");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsComplete");

                    b.Property<int?>("PriorityId");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("TimeFrameDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(datefromparts((2050),(1),(1)))");

                    b.Property<int>("TimeFrameId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserId");

                    b.HasKey("TaskId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Thought", b =>
                {
                    b.Property<int>("ThoughtId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProjectId")
                        .HasColumnType("nchar(10)");

                    b.Property<int>("SortId");

                    b.Property<DateTime>("TimeFrameDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(datefromparts((2050),(1),(1)))");

                    b.Property<int>("TimeFrameId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserId");

                    b.HasKey("ThoughtId");

                    b.ToTable("Thoughts");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.TimeFrameType", b =>
                {
                    b.Property<int>("TimeFrameId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TimeFrameId");

                    b.ToTable("TimeFrameType");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Habit", b =>
                {
                    b.HasOne("TasksAngular.Models.Entities.HabitEndOnType", "EndOnTypeNavigation")
                        .WithMany("Habits")
                        .HasForeignKey("EndOnType")
                        .HasConstraintName("FK_Habits_HabitEndOnType");
                });

            modelBuilder.Entity("TasksAngular.Models.Entities.Task", b =>
                {
                    b.HasOne("TasksAngular.Models.Entities.Priority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_Tasks_ToPriority");

                    b.HasOne("TasksAngular.Models.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Tasks_ToUser");
                });
#pragma warning restore 612, 618
        }
    }
}
